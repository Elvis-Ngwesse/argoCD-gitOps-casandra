
# ------------------------------
# Promtail ServiceAccount & RBAC
# ------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail-pod-reader
  annotations:
    argocd.argoproj.io/sync-wave: "5"
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail-pod-reader-binding
  annotations:
    argocd.argoproj.io/sync-wave: "5"
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: test
roleRef:
  kind: ClusterRole
  name: promtail-pod-reader
  apiGroup: rbac.authorization.k8s.io
---
# ------------------------------
# Loki Deployment
# ------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki:2.9.0
          args: ["-config.file=/etc/loki/config.yaml"]
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: config
              mountPath: /etc/loki
            - name: wal
              mountPath: /wal
            - name: loki-data
              mountPath: /loki
      volumes:
        - name: config
          configMap:
            name: loki-config
        - name: wal
          emptyDir: {}
        - name: loki-data
          emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  config.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      wal:
        enabled: true
        dir: /wal
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 3m
      chunk_retain_period: 1m
    schema_config:
      configs:
        - from: 2024-01-01
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb:
        directory: /loki/index
      filesystem:
        directory: /loki/chunks
    limits_config:
      enforce_metric_name: false
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: true
      retention_period: 24h

---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  ports:
    - port: 3100
      targetPort: 3100
  selector:
    app: loki

---
# Promtail DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
    restart.timestamp: "2025-06-13T06:55:00"
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail
      containers:
        - name: promtail
          image: grafana/promtail:3.2.1
          args:
            - -config.file=/etc/promtail/config.yaml
            - -config.expand-env
            - -log.level=debug         # <-- Enable debug logging
          env:
            - name: LOKI_URL
              value: http://loki:3100/loki/api/v1/push
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: pods
              mountPath: /var/log/pods
              readOnly: true
            - name: containers
              mountPath: /var/lib/containerd
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: promtail-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: pods
          hostPath:
            path: /var/log/pods
        - name: containers
          hostPath:
            path: /var/lib/containerd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  config.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: ${LOKI_URL}

    scrape_configs:
      - job_name: system
        static_configs:
          - targets: ["localhost"]
            labels:
              job: varlogs
              __path__: /var/log/*.log

      - job_name: kubernetes-pods
        pipeline_stages:
          - docker: {}  # or cri: {} depending on your container runtime
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Keep only test and logging namespaces (updated here)
          - source_labels: [__meta_kubernetes_namespace]
            regex: test|logging
            action: keep
          - source_labels: [__job__]
            action: replace
            target_label: job
            replacement: kubernetes-pods
          - source_labels: [__meta_kubernetes_pod_controller_name]
            regex: (.+)
            action: replace
            target_label: __tmp_controller_name
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            regex: (.+)
            action: replace
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: (.+)
            action: replace
            target_label: app
          - source_labels: [__tmp_controller_name]
            regex: (.+)
            action: replace
            target_label: app
          - source_labels: [__meta_kubernetes_pod_name]
            regex: (.+)
            action: replace
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance, __meta_kubernetes_pod_label_release]
            regex: (.+)
            action: replace
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
            regex: (.+)
            action: replace
            target_label: component
          - source_labels: [__meta_kubernetes_pod_label_component]
            regex: (.+)
            action: replace
            target_label: component
          - source_labels: [__meta_kubernetes_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [namespace, app]
            separator: /
            action: replace
            target_label: controller
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: replace
            target_label: container
          - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            separator: "_"
            target_label: __path__
            replacement: /var/log/containers/${1}_${2}.log

---
# Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 80
      targetPort: 3000
      nodePort: 30091
