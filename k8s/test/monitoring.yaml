---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: logging
  name: promtail
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /promtail/run/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      - job_name: varlogs
        static_configs:
          - targets:
              - localhost
            labels:
              job: varlogs
              node_name: "${HOSTNAME}"
              __path__: /var/log/*log
          - targets:
              - localhost
            labels:
              job: varlogs
              node_name: "${HOSTNAME}"
              __path__: /var/log/apt/*log
          - targets:
              - localhost
            labels:
              job: varlogs
              node_name: "${HOSTNAME}"
              __path__: /var/log/unattended-upgrades/*log
        pipeline_stages:
          - drop:
              expression: 'Failed to set up mount unit: Invalid argument$'
          - drop:
              expression: 'message repeated [0-9]+ times: \[ Failed to set up mount unit: Invalid argument\]$'
      - job_name: kubernetes-audit
        static_configs:
          - targets:
              - localhost
            labels:
              job: kubernetes-audit
              node_name: "${HOSTNAME}"
              __path__: /var/log/kubernetes/audit/audit.log
      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__job__]
            action: replace
            target_label: job
            replacement: kubernetes-pods
          - source_labels: [__meta_kubernetes_pod_controller_name]
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name, __meta_kubernetes_pod_label_app, __tmp_controller_name, __meta_kubernetes_pod_name]
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance, __meta_kubernetes_pod_label_release]
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component, __meta_kubernetes_pod_label_component]
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [namespace, app]
            separator: /
            action: replace
            target_label: controller
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: replace
            target_label: container
          - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            separator: -
            replacement: /var/log/containers/*$1*$2*.log
            target_label: __path__
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail
      securityContext:
        runAsNonRoot: false
      containers:
        - name: promtail
          image: grafana/promtail:2.9.5
          command: ["/usr/bin/promtail"]
          args:
            - -config.file=/promtail/config/promtail.yaml
            - -config.expand-env=true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /promtail/config
              name: config
              readOnly: true
            - mountPath: /promtail/run
              name: run
            - mountPath: /var/log
              mountPropagation: HostToContainer
              name: varlogs
              readOnly: true
            - mountPath: /var/log/containers
              name: containerlogs
              readOnly: true
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: promtail
        - name: run
          hostPath:
            path: /run/promtail
            type: DirectoryOrCreate
        - name: varlogs
          hostPath:
            path: /var/log
            type: Directory
        - name: containerlogs
          hostPath:
            path: /var/log/containers
            type: Directory
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
  annotations:
    argocd.argoproj.io/sync-wave: "5"
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: logging
roleRef:
  kind: ClusterRole
  name: promtail
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
  annotations:
    argocd.argoproj.io/sync-wave: "5"
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
    verbs:
      - get
      - watch
      - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
data:
  config.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      wal:
        enabled: true
        dir: /wal
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 3m
      chunk_retain_period: 1m
    schema_config:
      configs:
        - from: 2024-01-01
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb:
        directory: /loki/index
      filesystem:
        directory: /loki/chunks
    limits_config:
      enforce_metric_name: false
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: true
      retention_period: 24h
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki:2.9.0
          command: ["/usr/bin/loki"]
          args: ["-config.file=/etc/loki/config.yaml"]
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: config
              mountPath: /etc/loki
              readOnly: true
            - name: wal
              mountPath: /wal
            - name: loki-data
              mountPath: /loki
      volumes:
        - name: config
          configMap:
            name: loki-config
        - name: wal
          emptyDir: {}
        - name: loki-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  ports:
    - port: 3100
      targetPort: 3100
  selector:
    app: loki
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
  labels:
    grafana_datasource: "1"
data:
  loki.yaml: |
    apiVersion: 1
    datasources:
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        isDefault: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.1
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: storage
          emptyDir: {}
        - name: datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: logging
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
