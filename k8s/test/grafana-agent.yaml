---
# ---------------------------------------------------
# Grafana Agent ConfigMap for dynamic Kubernetes pod logs
# ---------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config
  namespace: logging
  labels:
    app.kubernetes.io/name: grafana-agent
  annotations:
    argocd.argoproj.io/sync-wave: "5"
data:
  config.river: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    local.file "positions" {
      filename = "/tmp/positions.yaml"
    }

    discovery.kubernetes "pods" {
      role = "pod"
    }

    loki.source.kubernetes "logs" {
      targets    = discovery.kubernetes.pods.targets
      forward_to = [loki.process.kubernetes.receiver]
    }

    loki.process "kubernetes" {
      stage.file_log {
        include      = ["/var/log/pods/*/*/*.log"]
        start_at     = "beginning"
        timestamp    = "auto"
        labels       = {
          job = "kubernetes-pods"
        }
        forward_to = [loki.write.local.receiver]
      }
    }

    loki.write "local" {
      endpoint {
        url = "http://loki.logging.svc.cluster.local:3100/loki/api/v1/push"
      }
    }

    prometheus.scrape "kubelet" {
      targets = [
        "localhost:10255"
      ]
      forward_to = [prometheus.remote_write.local.receiver]
    }

    prometheus.remote_write "local" {
      endpoint {
        url = "http://prometheus.logging.svc.cluster.local:9090/api/v1/write"
      }
    }

---
# ---------------------------------------------------
# Grafana Agent DaemonSet for Kubernetes pod logs
# ---------------------------------------------------
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grafana-agent
  namespace: logging
  labels:
    app.kubernetes.io/name: grafana-agent
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent
    spec:
      serviceAccountName: grafana-agent
      volumes:
        - name: config
          configMap:
            name: grafana-agent-config
        - name: positions
          emptyDir: {}
      containers:
        - name: grafana-agent
          image: grafana/agent:v0.38.0
          args:
            - run
            - /etc/agent/config.river
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: positions
              mountPath: /tmp
          ports:
            - name: http-metrics
              containerPort: 12345

---
# ---------------------------------------------------
# Service for Grafana Agent HTTP endpoint
# ---------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: grafana-agent
  namespace: logging
  labels:
    app: grafana-agent
spec:
  selector:
    app: grafana-agent
  ports:
    - protocol: TCP
      port: 12345         # Exposes port 12345 on the Service
      targetPort: 12345   # Maps to containerPort 12345
      name: http-metrics
  type: ClusterIP         # Default type; exposes service within the cluster

