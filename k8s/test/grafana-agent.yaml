---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config
  namespace: logging
data:
  agent.yaml: |
    metrics:
      global:
        scrape_interval: 60s
        scrape_timeout: 10s
      wal_directory: /tmp/grafana-agent-wal
      configs:
        - name: default
          scrape_configs:
            - job_name: 'node_exporter'
              metrics_path: /metrics
              static_configs:
                - targets: ['localhost:9100']
                  labels:
                    instance: 'minikube-node'
              metric_relabel_configs:
                - action: drop
                  regex: node_scrape_collector_.+
                  source_labels: [__name__]
              relabel_configs:
                - replacement: 'minikube-node'
                  target_label: instance

            - job_name: 'integrations/node_exporter_journal_scrape'
              journal:
                max_age: 24h
                labels:
                  instance: 'minikube-node'
                  job: 'integrations/node_exporter'
              relabel_configs:
                - source_labels: ['__journal__systemd_unit']
                  target_label: 'unit'
                - source_labels: ['__journal__boot_id']
                  target_label: 'boot_id'
                - source_labels: ['__journal__transport']
                  target_label: 'transport'
                - source_labels: ['__journal_priority_keyword']
                  target_label: 'level'

            - job_name: 'integrations/node_exporter_direct_scrape'
              static_configs:
                - targets: ['localhost']
                  labels:
                    instance: 'minikube-node'
                    __path__: /var/log/{syslog,messages,*.log}
                    job: 'integrations/node_exporter'

          remote_write:
            - url: http://prometheus.logging.svc.cluster.local:9090/api/v1/write
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
  - apiGroups: [""]
    resources: ["nodes", "pods", "endpoints"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
  - kind: ServiceAccount
    name: grafana-agent
    namespace: logging
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent
  namespace: logging
  labels:
    app: grafana-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-agent
  template:
    metadata:
      labels:
        app: grafana-agent
    spec:
      serviceAccountName: grafana-agent
      containers:
        - name: grafana-agent
          image: grafana/agent:v0.40.2
          args:
            - run
            - --config.file=/etc/agent/agent.yaml
            - --server.http.listen-addr=0.0.0.0:12345
          ports:
            - containerPort: 12345
              name: http-metrics
          volumeMounts:
            - name: config
              mountPath: /etc/agent
              readOnly: true
            - name: host-root
              mountPath: /host
              readOnly: true
          securityContext:
            runAsUser: 0
      volumes:
        - name: config
          configMap:
            name: grafana-agent-config
        - name: host-root
          hostPath:
            path: /
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-agent
  namespace: logging
  labels:
    app: grafana-agent
spec:
  selector:
    app: grafana-agent
  type: NodePort
  ports:
    - name: http-metrics
      protocol: TCP
      port: 80
      targetPort: 12345
      nodePort: 31245
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: logging
data:
  prometheus.yml: |
    global:
      scrape_interval: 60s
      scrape_timeout: 10s

    scrape_configs:
      - job_name: 'grafana-agent'
        static_configs:
          - targets: ['grafana-agent.logging.svc.cluster.local:80']
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: logging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources: ["nodes", "pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: logging
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: logging
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.52.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-data
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: logging
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - name: web
      port: 9090
      targetPort: 9090
      nodePort: 30900
