# ---------------------------------------------------
# 1. Namespace (test)
# ---------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: test
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
# ---------------------------------------------------
# 2. ServiceAccount + RBAC
# ---------------------------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-manager
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: statefulset-manager
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: statefulset-manager-binding
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
  - kind: ServiceAccount
    name: argocd-manager
    namespace: test
roleRef:
  kind: Role
  name: statefulset-manager
  apiGroup: rbac.authorization.k8s.io
---
# ---------------------------------------------------
# 3. PersistentVolume + PVC (for local testing only)
# ---------------------------------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mongo
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: mongo-pv
  storageClassName: ""
---
# ---------------------------------------------------
# 4. Mongo Headless Service + StatefulSet
# ---------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  clusterIP: None
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  serviceName: "mongo-service"
  replicas: 2
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: mongo
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
# ---------------------------------------------------
# 5. PreSync Job to delete mongo StatefulSet
# ---------------------------------------------------
apiVersion: batch/v1
kind: Job
metadata:
  name: delete-mongo-statefulset
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: argocd-manager
      restartPolicy: Never
      containers:
        - name: kubectl
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              kubectl delete statefulset mongo --namespace=test --cascade=orphan || true

---
# ---------------------------------------------------
# 6. Flask App Deployment + Service
# ---------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-app
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argocd-app
  template:
    metadata:
      labels:
        app: argocd-app
    spec:
      containers:
        - name: argocd-app
          image: dockerelvis/argocd-app:latest
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URI
              value: "mongodb://mongo-service:27017"
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  type: NodePort
  selector:
    app: argocd-app
  ports:
    - port: 5000
      targetPort: 5000
      nodePort: 30090
