# ---------------------------------------------------
# 1. Namespace (test)
# ---------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: test
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-creds
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "0"
type: Opaque
stringData:
  accesskey: minioadmin
  secretkey: minioadmin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          args:
            - server
            - /data
            - --console-address
            - ":9001"
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: secretkey
          ports:
            - containerPort: 9000
            - containerPort: 9001
          volumeMounts:
            - name: minio-data
              mountPath: /data
      volumes:
        - name: minio-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  selector:
    app: minio
  ports:
    - name: api
      port: 9000
      targetPort: 9000
    - name: console
      port: 9001
      targetPort: 9001
---
# ---------------------------------------------------
# 2. ServiceAccount + RBAC
# ---------------------------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-manager
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: statefulset-manager
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: statefulset-manager-binding
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
  - kind: ServiceAccount
    name: argocd-manager
    namespace: test
roleRef:
  kind: Role
  name: statefulset-manager
  apiGroup: rbac.authorization.k8s.io
---
# ---------------------------------------------------
# 3. PersistentVolume + PVC (for local testing only)
# ---------------------------------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mongo
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: mongo-pv
  storageClassName: ""
---
# ---------------------------------------------------
# 4. Mongo Headless Service + StatefulSet
# ---------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  clusterIP: None
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  serviceName: "mongo-service"
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: mongo
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
# ---------------------------------------------------
# 5. PreSync Job to delete mongo StatefulSet
# ---------------------------------------------------
apiVersion: batch/v1
kind: Job
metadata:
  name: delete-mongo-statefulset
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: argocd-manager
      restartPolicy: Never
      containers:
        - name: kubectl
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              kubectl delete statefulset mongo --namespace=test --cascade=orphan || true
---
apiVersion: batch/v1
kind: Job
metadata:
  name: python-test-job
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    metadata: {}
    spec:
      restartPolicy: Never
      volumes:
        - name: app-code
          emptyDir: {}

      initContainers:
        - name: git-clone
          image: alpine/git
          command:
            - sh
            - -c
            - git clone https://github.com/Elvis-Ngwesse/argoCD-mongodb.git /app
          volumeMounts:
            - name: app-code
              mountPath: /app

      containers:
        - name: pytest
          image: python:3.10
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: accesskey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: secretkey
            - name: MINIO_ENDPOINT
              value: "http://minio-service:9000"
            - name: MINIO_BUCKET
              value: "test-reports"
            - name: TIMESTAMP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['timestamp']
          command:
            - sh
            - -c
            - |
              pip install -r unit-tests/requirements.txt boto3 pytest-html && \
              export PYTHONPATH=/app && \
              TIMESTAMP=$(date +%Y%m%d%H%M%S) && \
              pytest unit-tests/test_app.py --junitxml=results_$TIMESTAMP.xml --html=results_$TIMESTAMP.html && \
              python3 /app/unit-tests/upload_results.py $TIMESTAMP

          workingDir: /app
          volumeMounts:
            - name: app-code
              mountPath: /app

---
# ---------------------------------------------------
# 6. Flask App Deployment + Service
# ---------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-app
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argocd-app
  template:
    metadata:
      labels:
        app: argocd-app
    spec:
      containers:
        - name: argocd-app
          image: dockerelvis/argocd-app:latest
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URI
              value: "mongodb://mongo-service:27017"
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  type: NodePort
  selector:
    app: argocd-app
  ports:
    - port: 5000
      targetPort: 5000
      nodePort: 30090

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-minio
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-minio
  template:
    metadata:
      labels:
        app: flask-minio
    spec:
      containers:
        - name: flask-minio
          image: dockerelvis/presigned-app:latest
          ports:
            - containerPort: 5002
          env:
            - name: MINIO_ENDPOINT
              value: "http://minio-service:9000"
            - name: MINIO_BUCKET
              value: "test-reports"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: accesskey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: secretkey

---
apiVersion: v1
kind: Service
metadata:
  name: flask-minio-service
  namespace: test
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  selector:
    app: flask-minio
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5002
  type: NodePort

